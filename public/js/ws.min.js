/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 55);
/******/ })
/************************************************************************/
/******/ ({

/***/ 25:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * библиотека для коннекта к вебсокетам, не зависит от наличия jQuery
 * пример:        new WS("channelName", handleData);
 * @type {{}}
 */

function WS(callback, serverHost) {
    var self = this;
    //this.channelName = channelName;
    this.callback = callback || function () {};
    this.serverHost = location.host;
    this.errored = false;
    this.connect();
};

WS.sockets = {};

WS.prototype.connect = function () {
    var self = this;
    // создать подключение
    self.startNative();
};

WS.prototype.startNative = function () {
    var self = this;

    var ws_params = typeof window.g_ws_params !== "undefined" ? window.g_ws_params : {};
    var defObject = typeof window.u !== "undefined" ? { 'h': u } : {};

    var str = this.getUrl(Object.assign(ws_params, defObject));

    //говорим, что сокеты инциализированы
    window.socketInited = true;

    var protocol = location.protocol === "https:" ? "wss://" : "ws://";

    this.ws = new WebSocket(protocol + self.serverHost + "/?" + str);

    this.ws.onopen = function (event) {

        if (self.errored) {
            $("#showMessage").addClass("hidden");
            location.reload();
        }

        if (self.interval) {
            clearInterval(self.interval);
        }
        self.interval = setInterval(function () {
            self.ws.send(JSON.stringify({ "action": "ping" }));
        }, 15000);
    };

    // обработчик входящих сообщений
    this.ws.onmessage = function (result) {
        var data = JSON.parse(result.data);

        if (data.action === "pong") {
            //проверяем что все ок
        } else if (data.action === "start_game") {
            //console.log(data);
            if (typeof data.game_id != "undefined" && data.tournament_id) {

                if (typeof g === "undefined") {
                    location.href = "/tournament/" + data.tournament_id + "/game/" + data.game_id;
                } else {
                    if (!isNaN(parseInt(g)) && g != data.game_id) {
                        location.href = "/tournament/" + data.tournament_id + "/game/" + data.game_id;
                    }
                }
            } else if (typeof data.game_id != "undefined" && !data.tournament_id) {
                if (typeof g === "undefined") {
                    location.href = "/play/game/" + data.game_id;
                } else {
                    if (!isNaN(parseInt(g)) && g != data.game_id) {
                        location.href = "/play/game/" + data.game_id;
                    }
                }
            }
        } else {
            //если это не старт партии передаем дальше
            self.onMessage(data, self);
        }
    };
    this.ws.onclose = function (isforced) {
        //try to reconnect in 5 seconds
        self.stop();
        console.log("WS CLOSED. RECONNECT IN 1 SECS");
        setTimeout(function () {
            self.startNative();
        }, 1000);
    };
    this.ws.onerror = function () {
        $("#showMessage").removeClass("hidden");
        self.errored = true;
        console.error("Не могу подключиться к нативным вебсокетам");
    };
};

WS.prototype.getUrl = function (ws_params) {
    var str = "";
    for (var key in ws_params) {
        if (str != "") {
            str += "&";
        }
        str += key + "=" + encodeURIComponent(ws_params[key]);
    }
    return str;
};

WS.prototype.onMessage = function (data, self) {
    self.callback(data);
};

WS.prototype.stop = function (s) {
    var socket = s || this.socket || this.ws;
    if (this.socket) {
        socket.disconnect();
    } else {
        socket.close();
    }

    for (var s in WS.sockets) {
        if (WS.sockets[s] === socket) {
            delete WS.sockets[s];
        }
    }
};

WS.prototype.stopAll = function () {
    for (var s in WS.sockets) {
        this.stop(WS.sockets[s]);
    }
    return true;
};

WS.prototype.showSonnections = function () {
    for (var s in WS.sockets) {
        console.log(s, WS.sockets[s]);
    }
    return true;
};

exports.default = WS;

/***/ }),

/***/ 55:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ws = __webpack_require__(25);

var _ws2 = _interopRequireDefault(_ws);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Web = function () {
    function Web() {
        _classCallCheck(this, Web);

        //console.log(window.g_ws_params);
        /* let ws_params = (typeof window.g_ws_params !== "undefined") ? window.g_ws_params : {};
         let defObject = (typeof window.u !== "undefined") ? {'h' : u} : {};
          const str = this.getUrl(Object.assign(ws_params, defObject));*/

        if (typeof window.socketInited === "undefined") {
            this.socket = new _ws2.default(function () {}, location.host);
        }

        /*window.socket = io(window.location.origin, {
            query:  str,
        });*/

        /*window.socket.on('eventClient', function (data) {
            if (data.event === "start_game") {
                //console.log(data);
                if (typeof data.game_id != "undefined" && data.tournament_id){
                     if (typeof g === "undefined") {
                        location.href = "/tournament/" + data.tournament_id + "/game/" + data.game_id;
                    } else {
                        if (!isNaN(parseInt(g)) && g != data.game_id) {
                            location.href = "/tournament/" + data.tournament_id + "/game/" + data.game_id;
                        }
                    }
                } else if (typeof data.game_id != "undefined" && !data.tournament_id){
                    if (typeof g === "undefined") {
                        location.href = "/play/game/" + data.game_id;
                    } else {
                        if (!isNaN(parseInt(g)) && g != data.game_id) {
                            location.href = "/play/game/" + data.game_id;
                        }
                    }
                }
             }
        });*/
    }

    _createClass(Web, [{
        key: "getUrl",
        value: function getUrl(ws_params) {
            var str = "";
            for (var key in ws_params) {
                if (str != "") {
                    str += "&";
                }
                str += key + "=" + encodeURIComponent(ws_params[key]);
            }
            return str;
        }
    }]);

    return Web;
}();

$(function () {
    new Web();
});

/***/ })

/******/ });