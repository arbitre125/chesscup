/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 51);
/******/ })
/************************************************************************/
/******/ ({

/***/ 28:
/*!************************!*\
  !*** ./app/sounds.jsx ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Sounds = {\n    \"capture\": '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',\n    \"move\": '//uQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAEAAAIKABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgICAgICAgICAgICAgICAgICAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwP////////////////////////////////8AAAA5TEFNRTMuOTlyAc0AAAAAAAAAABSAJAVSQgAAgAAACCjzj7vYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uQxAAAFOIA/BSUAAM0J+f3O6ACnNee0ogQCsVgmCYbJ5EAIAAwA4Lw/FxcXFzzBQUFKkXDsG4NAaA0DwUFEpxQUMT/R3d3+EFxd+ET9CBQUFET93LPfQXFxc975cUMqXd33e/9EFxc9+E3FBQUFEqXPFBQUMRK9/REREFxc93/9yxcXFxd7//5LFBQUMT4IFxc+4REFBcXfROSxQUM3FxeyAbh/aEIm4oZJYuLi78u7vpUoif7i4NA8MqEUCgUmw5mwxoNhsJACu4ZhgHRgyZZgWHIqqZeueMkxHM3y1Ndq6MJCDUfBwJhxhGHwQG3JpGEgxquXQa8Wm4eW6emVT1JSdI4cNeZk6PGC4Bk3Nhl9JGQ4WbEuhXCzIjC4SeTSqfnfyTVMiVFg6ZZiyIOGytFpuavMMu/hmknPx9l6/H3RSdhsbcGwwn////5HSXutcsceZ9ExXVbLCcf/////8qnIft4P/P4WLUuhp0p+5DTvf//////9PL87dfvc+4cpaaNVvuY8x3ZAY1sAj/aoARfMwK00MOzT2PPZaEIuJpt//uSxAwDlxC1Jj3NgAMXQSOBzA4obGAHUb9qB4GsGvUkZXCgCK5mxMmslOaUQJy6GahFHgqBkZEYiGmQGpkRqLFpgIYAAR2CYPXiX6CgeY0hmWEIiCSYCAIAgCWs3YvM0JpTCoo1qWxxiS7nulr4y53X9fWd5rK7WiUaymZbKbNLlvX2sameda1TU2V/uNKHSoabaNFxqpYOvxRMRSNGRc5vJUAV1R/01N7RD56ISzzor9/+MtOM44/aRjFwrMNhAxALQQJzCgTMxo0zUmDLZLMwGQyeVjCYiJBOkWBiWCCgYpOxmQCiEHAIFoyHexxmywvtcR4LxFwxiIdgYAAxCEKDoWajDIXxe10npbx9Y9F5REfjMTeW9MUvaOd3n+71nHEcX3wYkTVCOKrBQB0E54EZaIzUZkKxyL+zpMp94k4iRpmUM37JWJbDs1kbn+pmU1tJ80KTe6vzMoUlj6jmebY9DCFc61cWk4S9MuEi22ImrIpA3dIRsxDYK5UgACkkIJw1ebyNAQDLYlUILMCAHBKiaYHDIIYGHmVFAOCAEFJxmP/7ksQTARYZoyDtmHkK80FiQc0Y+QAoQKostmh9+XKo1yrFhhypQ6UnYa12MRKPQ0+rq3qtn/yrAx/a3AKJ2HGAFbVUkzABWLJdDSJpToQDgG1MPOYg23FqRIIEAN8SqWQMghv8dzmsuG1YzvEKZZrLDJLl9J/wXI8pEzqUnqX6ab118/POXX8Eh0yOBVdZlIgO+8vq9VaVOc5aw/zssmDXMaHoOW1SeMFBswiJjBQHMomQKqS1RjyJ3NJ2JZqg4GCsCkJc5SKRUta0/WEu3YmKfUZp3FrurGsiJGsSRY9MgeQWRKJbm5ICZZRZtOpKC4mZ7dLC1PM1m4+2YmcnLmJEZR2NnJfNmteXqn1AdB+HVszmouWjOU1bOa15T/GNRgKdnb/y1xTvOPG8pLZze88j3zadudmHJQspKvhrbeVpY2tk0peSRjXajxiFlbaCWepb6RFWdhaJItTmWOUASZNrURSGeaCoB6MOdM8QyFwq8SKGGKGCIlpmqbMpgiNhwCKJjSVogwEmNJGlOUaWYmicXCREtBctvyqLhaJx6kmvKNj/+5LEIoPUPdz6TJhvwAAANIAAAARaJ0VMUaVcrDVqQoKDQ1n5sFBOMKWH//soNBxIYGgpaR2GrA6Tax1DBnGFKhiQwQcSCcmuUpNSZaTVDVrSP81DAnIy/thq1QUFBoZNSZaR//zKUmAQwIWMwSDx79RMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',\n    \"endgame\": 'n    \"lowtime\": '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',\n    'confirmation': ''\n};\n\nexports.default = Sounds;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 51:
/*!*******************************!*\
  !*** ./app/game/game_new.jsx ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _sounds = __webpack_require__(/*! ../sounds.jsx */ 28);\n\nvar _sounds2 = _interopRequireDefault(_sounds);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nwindow.s_capture = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"capture\"]);\nwindow.s_move = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"move\"]);\nwindow.s_endgame = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"endgame\"]);\nwindow.s_lowtime = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"lowtime\"]);\nwindow.s_confirmation = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"confirmation\"]);\n\nwindow.s_audio_capture1 = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"capture\"]);\nwindow.s_audio_move1 = new Audio(\"data:audio/wav;base64,\" + _sounds2.default[\"move\"]);\n\ns_capture.volume = 0.2;\ns_move.volume = 0.2;\ns_endgame.volume = 0.2;\ns_lowtime.volume = 0.2;\ns_confirmation.volume = 0.2;\ns_audio_move1.volume = 0.2;\ns_audio_capture1.volume = 0.2;\n\nvar REASONS = {\n    \"insufficient_material\": \"Недостаточно материала\",\n    \"time_run_out\": \"Время истекло\",\n    \"stalemate\": \"Пат\",\n    \"draw\": \"Ничья\",\n    \"whitedidntmove\": \"Белые не сделали ход\",\n    \"threefold_repetition\": \"Троекратное повторение позиции\",\n    \"blackdidntmove\": \"Черные не сделали ход\",\n    \"mate\": \"Мат\",\n    \"resign\": function resign(p1_won) {\n        if (p1_won === 0) {\n            return \"Белые сдались\";\n        } else if (p1_won === 1) {\n            return \"Черные сдались\";\n        }\n    },\n    \"titles\": function titles(p1_won) {\n        if (p1_won === 0) {\n            return \"Победа черных\";\n        } else if (p1_won === 1) {\n            return \"Победа белых\";\n        } else if (p1_won === 0.5) {\n            return \"Ничья\";\n        }\n    }\n};\n\n/*var aa;\n(function(){\n    function ArcadeAudio() {\n        this.sounds = {};\n    }\n\n    ArcadeAudio.prototype.add = function( key, count, settings ) {\n        this.sounds[ key ] = [];\n        settings.forEach( function( elem, index ) {\n            this.sounds[ key ].push( {\n                tick: 0,\n                count: count,\n                pool: []\n            } );\n            for( var i = 0; i < count; i++ ) {\n                var audio = new Audio(\"data:audio/wav;base64,\" + Sounds[key]);\n                //audio.src = move;\n                this.sounds[ key ][ index ].pool.push( audio );\n            }\n        }, this );\n    };\n\n    ArcadeAudio.prototype.play = function( key ) {\n        var sound = this.sounds[ key ];\n        var soundData = sound.length > 1 ? sound[ Math.floor( Math.random() * sound.length ) ] : sound[ 0 ];\n        soundData.pool[ soundData.tick ].play();\n        soundData.tick < soundData.count - 1 ? soundData.tick++ : soundData.tick = 0;\n    };\n\n    aa = new ArcadeAudio();\n\n    aa.add( 'move', 1,[[]]);\n    aa.add( 'capture', 1,[[]]);\n    aa.add( 'endgame', 1,[[]]);\n    aa.add( 'lowtime', 1,[[]]);\n\n})();*/\n\nvar App = function () {\n    function App(props) {\n        _classCallCheck(this, App);\n\n        var self = this;\n\n        this.state = {\n            promotion: \"q\",\n            who_to_move: null,\n            isPlayer: false,\n            chat_id: typeof window.chat_id != \"undefined\" ? window.chat_id : null,\n            amount: amount,\n            time_inc: time_inc,\n            white_time: p1_time_left,\n            p1_name: p1_name,\n            p2_name: p2_name,\n            black_time: p2_time_left,\n            tourney_id: typeof tourney_id != \"undefined\" ? tourney_id : null,\n            tour_id: typeof tour_id != \"undefined\" ? tour_id : null,\n            moves: moves.split(\",\"),\n            timeleft: timeleft,\n            up_rating_change: null,\n            row: 0,\n            bottom_rating_change: null,\n            up_player_online: false,\n            bottom_player_online: false,\n            playerColor: null,\n            tourney_href: typeof tourney_id != \"undefined\" ? \"/tournament/\" + tourney_id : \"/play\",\n            tourney_text: typeof tourney_id != \"undefined\" ? \"Вернуться к турниру\" : \"REMATCH\",\n            is_over: is_over,\n            reason: reason,\n            p1_won: p1_won,\n            p2_won: p2_won,\n            is_started: parseInt(is_started),\n            orientation: \"white\",\n            up_name: p2_name,\n            up_tournaments_rating: p2_tournaments_rating,\n            bottom_name: p1_name,\n            bottom_tournaments_rating: p1_tournaments_rating\n        };\n        this.move = this.move.bind(this);\n\n        //ряды ходов\n        this.row = 0;\n        this.temp_move = this.state.moves.length - 2;\n        self.resignCount = 0;\n        self.drawCount = 0;\n        self.lowTimePlayed = false;\n\n        //флаг премува\n        this.premoved = false;\n\n        if (typeof fen != \"undefined\" && fen != \"undefined\" && fen != \"\" && fen != null) {\n            this.game = new Chess();\n            for (var i = 0; i < self.state.moves.length; i++) {\n                var obj = self.state.moves[i];\n                this.game.move(obj);\n            }\n        } else {\n            this.game = new Chess();\n        }\n\n        if (typeof u != \"undefined\" && p1 == u) {\n            this.state.isPlayer = true;\n            this.state.playerColor = \"white\";\n        } else if (typeof u != \"undefined\" && p2 == u) {\n            this.state.isPlayer = true;\n            this.state.playerColor = \"black\";\n            this.state.orientation = \"black\";\n        }\n\n        var width = $(\"#wrpr\").outerWidth();\n        var dirty = $('#dirty');\n        dirty.width(width).height(width).show();\n        $(\".player_bar\").width(width);\n\n        this.setState({\n            who_to_move: this.game.turn() === 'w' ? \"white\" : \"black\"\n        });\n\n        this.$clock_bottom_time = $(\".clock_bottom_time\");\n        this.$clock_top_time = $(\".clock_top_time\");\n        this.$clock_top = $(\".clock_top\");\n        this.$clock_bottom = $(\".clock_bottom\");\n        this.$moves = $(\".moves\");\n        this.$timeleft_black = $(\"#timeleft_black\");\n        this.$timeleft_white = $(\"#timeleft_white\");\n        this.$tourney_text = $(\".tourney_text\");\n        this.objDiv = document.querySelector(\".moves\");\n\n        this.cg = Chessground(dirty[0], {\n            fen: this.game.fen(),\n            turnColor: this.game.turn() === 'w' ? \"white\" : \"black\",\n            orientation: this.state.isPlayer ? this.state.playerColor : \"white\",\n            highlight: {\n                lastMove: true,\n                check: true\n            },\n            animation: {\n                enabled: false,\n                duration: 0\n            },\n            movable: {\n                showDests: true,\n                free: false,\n                dests: this.state.isPlayer ? getDests(self.game) : null,\n                color: this.state.isPlayer ? this.state.playerColor : null\n            },\n            events: {\n                move: self.move\n            }\n        });\n        this.socketIOConnect();\n        this.setNames();\n        this.setTime();\n        this.setIsOver(\"init\");\n        this.checkMobile();\n        this.setTimer();\n        this.setListeners();\n\n        //если ходов нет, очищаем массив\n        if (this.state.moves && this.state.moves.length) {\n\n            if (this.state.moves[0] === \"\") {\n                this.setState({\n                    moves: []\n                });\n            } else {\n                this.fillMoves();\n                this.scrollToBottom();\n            }\n        }\n\n        this.setInitialTimers();\n        self.setRunning();\n\n        if (this.state.isPlayer && this.state.is_started === 0 && this.state.is_over === 0) {\n            s_confirmation.play();\n        }\n\n        if (this.state.is_over) {\n            this.addResult();\n        }\n\n        this.game.header('White', p1_name);\n        this.game.header('Black', p2_name);\n        this.game.header('Site', 'chessround.com');\n    }\n\n    _createClass(App, [{\n        key: \"downloadPgn\",\n        value: function downloadPgn() {\n\n            var filename = \"chessround.com_\" + g + \".pgn\";\n            var pgn = this.game.pgn();\n            var element = document.createElement('a');\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(this.game.pgn()));\n            element.setAttribute('download', filename);\n\n            element.style.display = 'none';\n            document.body.appendChild(element);\n\n            element.click();\n\n            document.body.removeChild(element);\n        }\n    }, {\n        key: \"move\",\n        value: function move(source, target, promotion) {\n            var self = this;\n\n            // see if the move is legal\n            var move = self.game.move({\n                from: source,\n                to: target,\n                promotion: this.state.promotion\n            });\n\n            // illegal move\n            if (move === null) {\n                self.game.undo();\n                this.cg.set({ fen: self.game.fen() });\n                return false;\n            }\n\n            if (this.state.is_started !== 0) {\n                this.$timeleft_white.addClass(\"hidden\");\n                this.$timeleft_black.addClass(\"hidden\");\n            }\n\n            this.cg.set({\n                turnColor: this.game.turn() === 'w' ? \"white\" : \"black\",\n                movable: {\n                    dests: getDests(self.game)\n                }\n            });\n\n            var newState = {\n                who_to_move: this.game.turn() === 'w' ? \"white\" : \"black\"\n            };\n\n            self.setState(newState);\n\n            var send_data = {\n                data: self.game.fen(),\n                id: g,\n                tourney_id: this.state.tourney_id,\n                move: move.san,\n                captured: move.captured,\n                from: move.from,\n                to: move.to,\n                is_over: 0,\n                player: this.game.turn() === 'w' ? \"p2\" : \"p1\" //who made the last move\n            };\n            if (this.premoved === true) {\n                send_data['premoved'] = true;\n                this.premoved = false;\n            }\n            // checkmate?\n            if (self.game.in_checkmate() === true) {\n                send_data.is_over = 1;\n                send_data.p1_won = this.game.turn() === \"w\" ? 0 : 1;\n                send_data.p2_won = this.game.turn() === \"b\" ? 0 : 1;\n                send_data.p1_id = p1;\n                send_data.p2_id = p2;\n                send_data.reason = \"mate\";\n                send_data.tourney_id = this.state.tourney_id;\n            } else if (self.game.in_draw() === true) {\n                send_data.is_over = 1;\n                send_data.p1_won = 0.5;\n                send_data.p2_won = 0.5;\n                send_data.p1_id = p1;\n                send_data.p2_id = p2;\n\n                if (self.game.in_stalemate()) {\n                    send_data.reason = \"stalemate\";\n                } else if (self.game.in_threefold_repetition()) {\n                    send_data.reason = \"threefold_repetition\";\n                } else if (self.game.insufficient_material()) {\n                    send_data.reason = \"insufficient_material\";\n                }\n\n                send_data.tourney_id = this.state.tourney_id;\n            } else {\n                // check?\n                if (self.game.in_check() === true) {\n                    self.cg.set({\n                        check: true,\n                        state: {\n                            check: true\n                        }\n                    });\n                }\n            }\n\n            window.socket.emit('eventServer', send_data);\n        }\n    }, {\n        key: \"setState\",\n        value: function setState(new_state, callback) {\n            Object.assign(this.state, new_state);\n            if (callback) callback.apply(this);\n        }\n    }, {\n        key: \"checkMobile\",\n        value: function checkMobile() {\n            if (clientWidth < 960) {\n                $(\".mobile-controls\").removeClass(\"hidden\");\n                // $(\"#lichess_ground\").append($(\"#chat_side\"));\n            } else {\n                $(\".table_wrap\").removeClass(\"hidden\");\n            }\n        }\n    }, {\n        key: \"setPlayersOnline\",\n        value: function setPlayersOnline() {\n\n            if (this.state.up_player_online) {\n                $(\".up_player_online\").addClass(\"online\").removeClass(\"offline\");\n            } else {\n                $(\".up_player_online\").addClass(\"offline\").removeClass(\"online\");\n            }\n\n            if (this.state.bottom_player_online) {\n                $(\".bottom_player_online\").addClass(\"online\").removeClass(\"offline\");\n            } else {\n                $(\".bottom_player_online\").addClass(\"offline\").removeClass(\"online\");\n            }\n        }\n    }, {\n        key: \"setNames\",\n        value: function setNames() {\n            if (this.state.orientation === \"white\") {\n                $(\".bottom_name\").html(this.state.p1_name);\n                $(\".up_name\").html(this.state.p2_name);\n            } else {\n                $(\".up_name\").html(this.state.p1_name);\n                $(\".bottom_name\").html(this.state.p2_name);\n            }\n\n            $(\".p1_name\").html(this.state.p1_name);\n            $(\".p2_name\").html(this.state.p2_name);\n        }\n    }, {\n        key: \"rematchClick\",\n        value: function rematchClick() {\n            var self = this;\n\n            if (typeof this.rematchSent != \"undefined\" && this.rematchSent === true) {\n\n                $(\".offer_sent\").replaceWith(this.rematchBtnCache);\n                this.rematchSent = false;\n                this.$tourney_text = $(\".tourney_text\");\n                window.socket.emit('rematch_cancel', JSON.stringify({\n                    game_id: g\n                }));\n                var _item = {\n                    msg: \"отменил реванш\",\n                    user_id: u,\n                    name: user_name,\n                    chat_id: this.state.chat_id\n                };\n\n                window.socket.emit('message', _item);\n                return false;\n            }\n\n            this.rematchBtnCache = this.$tourney_text.get(0).outerHTML;\n            this.rematchSent = true;\n\n            this.$tourney_text.replaceWith('<a class=\"button rematch offer_sent white me\" title=\"Предложение реванша отправлено\">' + '<div class=\"spinner\"><svg viewBox=\"0 0 40 40\"><circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"none\"></circle></svg></div></a>');\n\n            //console.log(element);\n\n            window.socket.emit('rematch_game', JSON.stringify({\n                \"user_id\": u,\n                \"current_color\": u == p1 ? \"white\" : \"black\",\n                \"user_name\": user_name,\n                \"enemy_id\": u == p1 ? p2 : p1\n            }));\n\n            var item = {\n                msg: \"предложил реванш\",\n                user_id: u,\n                name: user_name,\n                chat_id: this.state.chat_id\n            };\n\n            window.socket.emit('message', item);\n        }\n    }, {\n        key: \"setIsOver\",\n        value: function setIsOver(caller) {\n            var self = this;\n            //если игра завершена\n            if (this.state.is_over === 1) {\n                $(\".players-btns\").addClass(\"hidden\");\n\n                if (this.state.isPlayer) {\n                    $(\".rematch\").removeClass(\"hidden\");\n                }\n\n                //выиграли белые\n                if (this.state.p1_won === 1) {\n                    $(\".p1_won\").removeClass(\"hidden\");\n                } else if (this.state.p2_won === 1) {\n                    $(\".p2_won\").removeClass(\"hidden\");\n                } else if (this.state.p2_won === 0.5) {\n                    $(\".p2_draw\").removeClass(\"hidden\");\n                }\n\n                if (this.state.isPlayer) {\n                    if (this.state.tourney_id === null) {\n                        this.$tourney_text.text(\"РЕВАНШ\");\n                        $(\".rematch\").on(\"click\", function (event) {\n                            self.rematchClick();\n                            return false;\n                        });\n                    } else {\n                        this.$tourney_text.text(\"К ТУРНИРУ\");\n                        this.$tourney_text.attr(\"href\", this.state.tourney_href);\n                    }\n                }\n\n                self.setState({\n                    bottom_rating_change: typeof rating_change_p1 != \"undefined\" ? rating_change_p1 : 0,\n                    up_rating_change: typeof rating_change_p2 != \"undefined\" ? rating_change_p2 : 0\n                });\n\n                self.cg.set({\n                    movable: {\n                        color: null\n                    },\n                    turnColor: null\n                });\n\n                //скрываем все управляющие кнопки\n                $(\".control.buttons\").not(\".rematch\").addClass(\"hidden\");\n\n                if (this.state.isPlayer && caller != \"init\") {\n                    window.s_endgame.play();\n                    //aa.play('endgame');\n                }\n            } else {\n                //если партия не завершена\n                if (this.state.isPlayer) {\n                    $(\".players-btns\").removeClass(\"hidden\");\n                }\n            }\n        }\n    }, {\n        key: \"addResult\",\n        value: function addResult() {\n            //console.log(this.state.reason);\n            var reason = \"\";\n            if (this.state.reason === \"resign\") {\n                reason = REASONS[this.state.reason](this.state.p1_won);\n            } else {\n                reason = REASONS[this.state.reason];\n            }\n            this.$moves.append($('<div class=\"result_wrap\"><p class=\"result\">' + this.state.p1_won + '-' + this.state.p2_won + '</p><div class=\"status\"><div>' + reason + '</div><div>' + REASONS.titles(this.state.p1_won) + '</div></p></div>'));\n\n            this.scrollToBottom();\n        }\n    }, {\n        key: \"fillMoves\",\n        value: function fillMoves() {\n            for (var i = 0; i < this.state.moves.length; i++) {\n                if ($.trim(this.state.moves[i]) != \"\") {\n                    this.addMove(this.state.moves[i], i);\n                }\n            }\n            if (this.state.moves.length > 2) {\n                $(\".draw-yes\").removeAttr(\"disabled\");\n            }\n        }\n    }, {\n        key: \"setTimer\",\n        value: function setTimer() {\n            var self = this;\n            if (this.timer) clearInterval(this.timer);\n\n            this.timer = setInterval(function () {\n                if (self.state.is_over == 0 && self.state.is_started == 1) {\n                    self.tick();\n                } else {\n                    clearInterval(this.timer);\n                }\n            }, 100);\n        }\n    }, {\n        key: \"resign\",\n        value: function resign(button) {\n            // var element = this;\n\n            var self = this;\n            var element = $(button);\n            //var value = event.target.value;\n\n\n            self.resignCount++;\n\n            if (self.resignCount > 1) {\n                self.resignCount = 0;\n\n                var send_data = {\n                    data: self.game.fen(),\n                    id: g,\n                    is_over: 1,\n                    player: self.state.who_to_move === 'white' ? \"p1\" : \"p2\" //кто должен ходить\n                };\n                send_data.is_over = 1;\n                send_data.p1_won = self.state.playerColor === 'white' ? 0 : 1;\n                send_data.p2_won = self.state.playerColor === 'black' ? 0 : 1;\n                send_data.p1_id = p1;\n                send_data.p2_id = p2;\n                send_data.reason = \"resign\";\n                send_data.tourney_id = self.state.tourney_id;\n                window.socket.emit('eventServer', send_data);\n            } else {\n                element.closest(\".control\").addClass(\"confirm\");\n                element.addClass(\"yes active\");\n                element.wrap($(\"<div class='act_confirm resign'></div>\"));\n            }\n            setTimeout(function () {\n                if (self.state.is_over == 0) {\n                    element.unwrap();\n                    element.closest(\".control\").removeClass(\"confirm\");\n                    element.removeClass(\"yes active\");\n                }\n                self.resignCount = 0;\n            }, 3000);\n        }\n    }, {\n        key: \"draw\",\n        value: function draw(button) {\n            // var element = this;\n\n            var self = this;\n            var element = $(button);\n            //var value = event.target.value;\n\n\n            self.drawCount++;\n            if (self.drawCount > 1) {\n                self.drawCount = 0;\n\n                window.socket.emit('draw_offer', JSON.stringify({\n                    \"enemy_id\": u == p1 ? p2 : p1,\n                    \"game_id\": g\n                }));\n\n                $(\".pending\").parent().removeClass(\"hidden\");\n                $(\".negotiation\").parent().addClass(\"hidden\");\n                element.unwrap();\n                element.closest(\".control\").removeClass(\"confirm\");\n                element.removeClass(\"yes active\");\n                self.drawCount = 0;\n                clearTimeout(this.drawTimeout);\n                $(\".draw\").attr(\"disabled\", \"disabled\");\n\n                var item = {\n                    msg: \"предложил ничью\",\n                    user_id: u,\n                    name: user_name,\n                    chat_id: this.state.chat_id\n                };\n\n                window.socket.emit('message', item);\n            } else {\n                element.closest(\".control\").addClass(\"confirm\");\n                element.addClass(\"yes active\");\n                element.wrap($(\"<div class='act_confirm resign'></div>\"));\n\n                this.drawTimeout = setTimeout(function () {\n                    if (self.state.is_over == 0) {\n                        element.unwrap();\n                        element.closest(\".control\").removeClass(\"confirm\");\n                        element.removeClass(\"yes active\");\n                    }\n                    self.drawCount = 0;\n                }, 3000);\n            }\n        }\n    }, {\n        key: \"tick\",\n        value: function tick() {\n            if (this.state.who_to_move === \"white\") {\n                this.setState({\n                    white_time: this.state.white_time - 100\n                }, function () {\n                    if (this.state.white_time < 0) {\n                        var send_data = {\n                            data: this.game.fen(),\n                            id: g,\n                            player: \"p1\"\n                        };\n\n                        send_data.p1_won = 0;\n                        send_data.p2_won = 1;\n                        send_data.p1_id = p1;\n                        send_data.p2_id = p2;\n                        send_data.tourney_id = this.state.tourney_id;\n                        //debugger;\n\n\n                        window.socket.emit('checkTime1', JSON.stringify(send_data));\n                    } else {\n                        this.setTime();\n                    }\n                });\n            } else if (this.state.who_to_move === \"black\") {\n                this.setState({\n                    black_time: this.state.black_time - 100\n                }, function () {\n                    //debugger;\n                    if (this.state.black_time < 0 && this.state.is_over != 1) {\n\n                        var send_data = {\n                            data: this.game.fen(),\n                            id: g,\n                            player: \"p2\"\n                        };\n                        send_data.p1_won = 1;\n                        send_data.p2_won = 0;\n                        send_data.p1_id = p1;\n                        send_data.p2_id = p2;\n                        send_data.tourney_id = this.state.tourney_id;\n                        window.socket.emit('checkTime1', JSON.stringify(send_data));\n                    } else {\n                        this.setTime();\n                    }\n                });\n            }\n        }\n    }, {\n        key: \"setTime\",\n        value: function setTime() {\n            var p1_minutes = Math.floor(this.state.white_time / (1000 * 60));\n            var p1_secs = Math.floor(this.state.white_time / 1000 % 60);\n\n            var p1_milliseconds = void 0,\n                p2_milliseconds = void 0;\n\n            var p2_minutes = Math.floor(this.state.black_time / (1000 * 60));\n            var p2_secs = Math.floor(this.state.black_time / 1000 % 60);\n\n            if (this.state.is_over === 1) {\n                p1_milliseconds = Math.floor(this.state.white_time % 1000 / 10);\n                p2_milliseconds = Math.floor(this.state.black_time % 1000 / 10);\n            } else {\n                p1_milliseconds = Math.floor(this.state.white_time % 1000 / 100);\n                p2_milliseconds = Math.floor(this.state.black_time % 1000 / 100);\n            }\n\n            p1_minutes = p1_minutes < 0 ? 0 : p1_minutes;\n            p1_secs = p1_secs < 0 ? 0 : p1_secs;\n            p2_minutes = p2_minutes < 0 ? 0 : p2_minutes;\n            p2_secs = p2_secs < 0 ? 0 : p2_secs;\n\n            p1_minutes = p1_minutes < 10 ? \"0\" + p1_minutes : p1_minutes;\n            p1_secs = p1_secs < 10 ? \"0\" + p1_secs : p1_secs;\n            p2_minutes = p2_minutes < 10 ? \"0\" + p2_minutes : p2_minutes;\n            p2_secs = p2_secs < 10 ? \"0\" + p2_secs : p2_secs;\n\n            var up_clock_minutes = void 0;\n            var up_clock_seconds = void 0;\n            var bottom_clock_minutes = void 0;\n            var bottom_clock_seconds = void 0;\n            var bottom_clock_milliseconds = void 0;\n            var up_clock_milliseconds = void 0;\n            var upclock = void 0;\n            var bottomclock = void 0;\n\n            // console.log(this.state.orientation);\n            if (this.state.orientation === \"white\") {\n                bottom_clock_minutes = p1_minutes;\n                bottom_clock_seconds = p1_secs;\n                bottom_clock_milliseconds = p1_milliseconds;\n                up_clock_minutes = p2_minutes;\n                up_clock_seconds = p2_secs;\n                up_clock_milliseconds = p2_milliseconds;\n            } else if (this.state.orientation === \"black\") {\n                bottom_clock_minutes = p2_minutes;\n                bottom_clock_seconds = p2_secs;\n                bottom_clock_milliseconds = p2_milliseconds;\n                up_clock_minutes = p1_minutes;\n                up_clock_seconds = p1_secs;\n                up_clock_milliseconds = p1_milliseconds;\n            }\n\n            if (this.state.white_time < 10000) {\n                if (this.state.orientation === \"white\") {\n                    this.$clock_bottom.addClass(\"emerg\");\n                    bottomclock = bottom_clock_minutes + '<span class=\"low\">:</span>' + bottom_clock_seconds + \".\" + '<span class=\"small-bottom\">' + bottom_clock_milliseconds + '</span>';\n                    //this.$clock_top.removeClass(\"emerg\");\n                    if (this.state.isPlayer && this.state.playerColor === \"white\" && this.lowTimePlayed === false && this.state.is_over === 0) {\n                        s_lowtime.play();\n                        this.lowTimePlayed = true;\n                    }\n                } else {\n                    upclock = up_clock_minutes + '<span class=\"low\">:</span>' + up_clock_seconds + \".\" + '<span class=\"small-bottom\">' + up_clock_milliseconds + '</span>';\n                    this.$clock_top.addClass(\"emerg\");\n                    //this.$clock_bottom.removeClass(\"emerg\");\n                }\n            } else {\n\n                if (this.state.orientation === \"white\") {\n                    bottomclock = bottom_clock_minutes + '<span class=\"low\">:</span>' + bottom_clock_seconds;\n                } else {\n                    upclock = up_clock_minutes + '<span class=\"low\">:</span>' + up_clock_seconds;\n                }\n            }\n\n            if (this.state.black_time < 10000) {\n                if (this.state.orientation === \"white\") {\n                    this.$clock_top.addClass(\"emerg\");\n\n                    upclock = up_clock_minutes + '<span class=\"low\">:</span>' + up_clock_seconds + \".\" + '<span class=\"small-bottom\">' + up_clock_milliseconds + '</span>';\n                } else {\n                    this.$clock_bottom.addClass(\"emerg\");\n\n                    bottomclock = bottom_clock_minutes + '<span class=\"low\">:</span>' + bottom_clock_seconds + \".\" + '<span class=\"small-bottom\">' + bottom_clock_milliseconds + '</span>';\n\n                    if (this.state.isPlayer && this.state.playerColor === \"black\" && this.lowTimePlayed === false && this.state.is_over === 0) {\n                        s_lowtime.play();\n                        this.lowTimePlayed = true;\n                    }\n                    //this.$clock_top.removeClass(\"emerg\");\n                }\n            } else {\n\n                if (this.state.orientation === \"white\") {\n                    upclock = up_clock_minutes + '<span class=\"low\">:</span>' + up_clock_seconds;\n                } else {\n                    bottomclock = bottom_clock_minutes + '<span class=\"low\">:</span>' + bottom_clock_seconds;\n                }\n            }\n\n            /*this.$clock_top_time.html(up_clock_minutes + '<span class=\"low\">:</span>' + up_clock_seconds + \".\" + '<span class=\"small-bottom\">' + up_clock_milliseconds + '</span>');\n            this.$clock_bottom_time.html(bottom_clock_minutes + '<span class=\"low\">:</span>' + bottom_clock_seconds + \".\" + '<span class=\"small-bottom\">' + bottom_clock_milliseconds + '</span>');*/\n            this.$clock_top_time.html(upclock);\n            this.$clock_bottom_time.html(bottomclock);\n        }\n    }, {\n        key: \"socketMove\",\n        value: function socketMove(data) {\n            var self = this;\n\n            self.game.move({ from: data.from, to: data.to });\n            if (self.game.fen() !== data.fen) {\n                self.game.load(data.fen);\n            }\n\n            self.setState({\n                who_to_move: self.game.turn() === 'w' ? \"white\" : \"black\",\n                white_time: data.p1_time_left,\n                black_time: data.p2_time_left,\n                is_over: data.is_over,\n                is_started: self.game.turn() === 'w' ? 1 : self.state.is_started\n            }, function () {\n                self.setTime();\n\n                var is_over = data.is_over == 1;\n\n                /* if (u == p1 && this.state.who_to_move == \"white\") {\n                     if (!is_over) {\n                         const moves = self.game.moves({verbose:true});\n                         const move = moves[Math.floor(Math.random() * moves.length)];\n                         console.log(move);\n                         setTimeout(function () {\n                             self.move(move.from, move.to);\n                         }, 100);\n                     }\n                 }\n                  if (u == p2 && this.state.who_to_move == \"black\") {\n                     if (!is_over) {\n                         const moves = self.game.moves({verbose:true});\n                         const move = moves[Math.floor(Math.random() * moves.length)];\n                         console.log(move);\n                         setTimeout(function () {\n                             self.move(move.from, move.to);\n                         }, 100);\n                     }\n                 }\n                  /* if (is_over) {\n                  self.defeat_sound.play()\n                  }*/\n\n                self.cg.set({\n                    fen: self.game.fen(),\n                    viewOnly: is_over,\n                    lastMove: [data.from, data.to],\n                    movable: {\n                        dests: getDests(self.game)\n                    },\n                    turnColor: self.game.turn() === 'w' ? \"white\" : \"black\"\n                });\n\n                self.premoved = self.cg.playPremove();\n\n                if (self.game.in_check() === true) {\n                    self.cg.set({\n                        check: true,\n                        state: {\n                            check: true\n                        }\n                    });\n                }\n\n                if (typeof data.san != \"undefined\" && data.san != \"undefined\") {\n                    var a = this.state.moves;\n                    a.push(data.san);\n                    self.setState({\n                        moves: a\n                    }, function () {\n                        self.addMove(data.san);\n                        self.scrollToBottom();\n                    });\n\n                    if (data.captured) {\n\n                        if (!window.s_capture.paused) {\n                            setTimeout(function () {\n                                s_audio_capture1.play();\n                            }, 50);\n                        } else {\n                            window.s_capture.play();\n                        }\n                    } else {\n\n                        if (!window.s_move.paused) {\n                            setTimeout(function () {\n                                s_audio_move1.play();\n                            }, 50);\n                        } else {\n                            window.s_move.play();\n                        }\n                    }\n                }\n            });\n\n            if (this.state.is_started === 1) {\n                self.$timeleft_black.addClass(\"hidden\");\n                self.$timeleft_white.addClass(\"hidden\");\n                if (this.state.moves.length > 2) {\n                    $(\".draw-yes\").removeAttr(\"disabled\");\n                }\n                self.setRunning();\n            } else {\n                if (this.state.moves.length === 0) {\n                    self.$timeleft_white.removeClass(\"hidden\");\n                }\n                if (this.state.moves.length === 1) {\n                    self.$timeleft_black.removeClass(\"hidden\");\n                    self.$timeleft_white.addClass(\"hidden\");\n                    self.startTimer();\n                }\n            }\n        }\n    }, {\n        key: \"cancelMove\",\n        value: function cancelMove(data) {\n            var self = this;\n            //если игра завершена, но сокет с ходом проскочил и это обнаружилось как он сделал ход\n            //отменяем последений ход пользователя для него, если игра уже завершена, но сокет с ходом проскочил\n            if (typeof u !== \"undefined\" && u == p1 && data.canceled_side === \"p1\") {\n                var undo = self.game.undo();\n                // console.log(\"white undo\");\n                // console.log(undo);\n            } else if (typeof u !== \"undefined\" && u == p2 && data.canceled_side === \"p2\") {\n                var _undo = self.game.undo();\n                // console.log(\"black undo\");\n\n                // console.log(undo);\n            }\n            // console.log(self.game.fen());\n\n            self.cg.set({\n                fen: self.game.fen(),\n                viewOnly: true,\n                movable: {\n                    color: null\n                },\n                turnColor: null\n            });\n        }\n    }, {\n        key: \"goBack\",\n        value: function goBack() {\n            var self = this;\n            var history = self.game.history();\n\n            self.temp_game = new Chess();\n            if (self.temp_move - 1 >= 0) {\n                --self.temp_move;\n\n                for (var i = 0; i < history.length; i++) {\n                    var obj1 = history[i];\n                    if (i <= self.temp_move) {\n                        self.temp_game.move(obj1);\n                    }\n                }\n                //self.move_sound.play();\n\n                self.cg.set({\n                    fen: self.temp_game.fen(),\n                    viewOnly: true\n                });\n            } else {\n                self.cg.set({\n                    fen: self.temp_game.fen(),\n                    viewOnly: false\n\n                });\n            }\n        }\n    }, {\n        key: \"setRunning\",\n        value: function setRunning() {\n            var self = this;\n            if (this.state.orientation === \"white\" && this.state.who_to_move === \"white\" && this.state.is_over !== 1) {\n                this.$clock_bottom.addClass(\"running\");\n                this.$clock_top.removeClass(\"running\");\n            } else if (this.state.orientation === \"black\" && this.state.who_to_move === \"white\" && this.state.is_over !== 1) {\n                this.$clock_top.addClass(\"running\");\n                this.$clock_bottom.removeClass(\"running\");\n            } else if (this.state.orientation === \"white\" && this.state.who_to_move === \"black\" && this.state.is_over !== 1) {\n                this.$clock_top.addClass(\"running\");\n                this.$clock_bottom.removeClass(\"running\");\n            } else if (this.state.orientation === \"black\" && this.state.who_to_move === \"black\" && this.state.is_over !== 1) {\n                this.$clock_bottom.addClass(\"running\");\n                this.$clock_top.removeClass(\"running\");\n            } else {\n                this.$clock_top.removeClass(\"running\");\n                this.$clock_bottom.removeClass(\"running\");\n            }\n        }\n    }, {\n        key: \"goForward\",\n        value: function goForward() {\n            var self = this;\n            var history = self.game.history();\n\n            self.temp_game = new Chess();\n            if (self.temp_move + 1 < history.length) {\n                self.temp_move++;\n\n                var lastMove;\n\n                for (var i = 0; i < history.length; i++) {\n                    var obj1 = history[i];\n                    if (i <= self.temp_move) {\n                        lastMove = self.temp_game.move(obj1);\n                    }\n                }\n\n                if (lastMove.captured) {\n                    //self.capture_sound.play();\n                } else {\n                        //self.move_sound.play();\n                    }\n\n                self.cg.set({\n                    fen: self.temp_game.fen(),\n                    viewOnly: true\n\n                });\n            } else {\n                self.cg.set({\n                    fen: self.game.fen(),\n                    viewOnly: false\n\n                });\n            }\n        }\n    }, {\n        key: \"addMove\",\n        value: function addMove(san, i) {\n            var m = i;\n            if (typeof m === \"undefined\") {\n                m = this.state.moves.length - 1;\n            }\n            if (m % 2 == 0) {\n                this.$moves.append($(\"<index>\" + ++this.row + \"</index>\"));\n            }\n            this.$moves.append($(\"<move>\" + san + \"</move>\"));\n        }\n    }, {\n        key: \"setInitialTimers\",\n        value: function setInitialTimers() {\n            var self = this;\n            //debugger\n            if (this.state.is_started !== 1 && this.state.is_over !== 1) {\n                if (this.state.moves.length === 0) {\n                    self.$timeleft_white.removeClass(\"hidden\");\n                    self.startTimer();\n                }\n                if (this.state.moves.length === 1) {\n                    self.$timeleft_black.removeClass(\"hidden\");\n                    self.$timeleft_white.addClass(\"hidden\");\n                    self.startTimer();\n                }\n            }\n        }\n    }, {\n        key: \"startTimer\",\n        value: function startTimer() {\n            var self = this;\n            this.initial_timer = this.state.timeleft / 1000;\n            clearInterval(self.start_interval);\n            this.start_interval = setInterval(function () {\n                var minutes = Math.floor(self.initial_timer / 60);\n                var secs = Math.floor(self.initial_timer % 60 % 60);\n                if (self.initial_timer >= 0 && self.state.is_started === 0) {\n                    $(\".timeleft\").html(minutes + \":\" + secs);\n                    --self.initial_timer;\n                } else {\n                    clearInterval(self.start_interval);\n                    $(\".timeleft\").html(\"00:00\");\n                    if (self.state.is_started === 1) {\n                        self.$timeleft_black.addClass(\"hidden\");\n                        self.$timeleft_white.addClass(\"hidden\");\n                    }\n                }\n            }, 1000);\n        }\n    }, {\n        key: \"scrollToBottom\",\n        value: function scrollToBottom() {\n            //scroll to bottom\n            if (this.objDiv) {\n                this.objDiv.scrollTop = this.objDiv.scrollHeight;\n            }\n        }\n    }, {\n        key: \"socketRatingChange\",\n        value: function socketRatingChange(data) {\n            var self = this;\n\n            if (self.state.orientation === \"white\" && self.state.is_over === 1) {\n                self.setState({\n                    bottom_rating_change: data.rating_change_p1,\n                    up_rating_change: data.rating_change_p2\n                });\n            } else if (self.state.orientation === \"black\" && self.state.is_over === 1) {\n                self.setState({\n                    bottom_rating_change: data.rating_change_p2,\n                    up_rating_change: data.rating_change_p1\n                });\n            }\n\n            self.cg.set({\n                viewOnly: true,\n                movable: {\n                    color: null\n                },\n                turnColor: null\n            });\n        }\n    }, {\n        key: \"socketGamerOver\",\n        value: function socketGamerOver(data) {\n            var self = this;\n\n            //если игра завершена, но пришел ход, значит кто то уронил флаг и это обнаружилось как он сделал ход\n            if (data.flagged) {\n                //отменяем последений ход пользователя для него, если он уронил флаг\n                if (typeof u !== \"undefined\" && u == p1 && data.flagged === \"white\") {\n                    var undo = self.game.undo();\n                    //console.log(\"white undo\");\n                    //console.log(undo);\n                } else if (typeof u !== \"undefined\" && u == p2 && data.flagged === \"black\") {\n                    var undo = self.game.undo();\n                    // console.log(\"black undo\");\n\n                    //console.log(undo);\n                }\n                // console.log(self.game.fen());\n            }\n\n            clearInterval(self.timer);\n            self.setState({\n                is_over: data.is_over,\n                p1_won: data.p1_won,\n                p2_won: data.p2_won,\n                reason: data.reason,\n                white_time: data.p1_time_left,\n                black_time: data.p2_time_left\n            }, function () {\n                self.setIsOver();\n                self.setTime();\n            });\n\n            self.cg.set({\n                fen: self.game.fen(),\n                // viewOnly : 1,\n                lastMove: null,\n                movable: {\n                    color: null\n                },\n                turnColor: null\n            });\n\n            //self.defeat_sound = $(\"#defeat_sound\")[0];\n\n            self.$timeleft_black.addClass(\"hidden\");\n            self.$timeleft_white.addClass(\"hidden\");\n\n            self.addResult();\n        }\n    }, {\n        key: \"socketGameAborted\",\n        value: function socketGameAborted(data) {\n            var self = this;\n\n            clearInterval(self.timer);\n            self.setState({\n                is_over: data.is_over\n            }, self.setIsOver);\n\n            self.cg.set({\n                viewOnly: true,\n                movable: {\n                    color: null\n                },\n                turnColor: null\n            });\n\n            alert(\"Игра отменена сервером\");\n        }\n    }, {\n        key: \"socketRematchOffer\",\n        value: function socketRematchOffer(data) {\n            var self = this;\n            $(\"#rematchModal\").modal(\"show\");\n        }\n    }, {\n        key: \"socketPlayerOnline\",\n        value: function socketPlayerOnline(data) {\n            data = data.players;\n            var self = this;\n            if (!data[p1]) {\n                if (self.state.orientation === \"black\") {\n                    self.setState({\n                        up_player_online: false\n                    }, self.setPlayersOnline);\n                } else {\n                    self.setState({\n                        bottom_player_online: false\n                    }, self.setPlayersOnline);\n                }\n            } else {\n                if (self.state.orientation === \"black\") {\n                    self.setState({\n                        up_player_online: true\n                    }, self.setPlayersOnline);\n                } else {\n                    self.setState({\n                        bottom_player_online: true\n                    }, self.setPlayersOnline);\n                }\n            }\n            if (!data[p2]) {\n                if (self.state.orientation === \"black\") {\n                    self.setState({\n                        bottom_player_online: false\n                    }, self.setPlayersOnline);\n                } else {\n                    self.setState({\n                        up_player_online: false\n                    }, self.setPlayersOnline);\n                }\n            } else {\n                if (self.state.orientation === \"white\") {\n                    self.setState({\n                        up_player_online: true\n                    }, self.setPlayersOnline);\n                } else {\n                    self.setState({\n                        bottom_player_online: true\n                    }, self.setPlayersOnline);\n                }\n            }\n        }\n    }, {\n        key: \"playzoneStartGame\",\n        value: function playzoneStartGame(data) {\n            var self = this;\n            // console.log(data);\n\n            location.href = \"/play/game/\" + data.game_id;\n        }\n    }, {\n        key: \"decline_draw\",\n        value: function decline_draw(data) {\n            var self = this;\n            // console.log(data);\n\n            $(\".pending\").parent().addClass(\"hidden\");\n            $(\".negotiation\").parent().addClass(\"hidden\");\n        }\n    }, {\n        key: \"decline_rematch\",\n        value: function decline_rematch(data) {\n            var self = this;\n            // console.log(data);\n\n            $(\".offer_sent\").replaceWith(this.rematchBtnCache);\n            this.rematchSent = false;\n            this.$tourney_text = $(\".tourney_text\");\n        }\n    }, {\n        key: \"rematch_cancel\",\n        value: function rematch_cancel(data) {\n            var self = this;\n            // console.log(data);\n            $(\"#rematchModal\").modal(\"hide\");\n        }\n    }, {\n        key: \"draw_offer\",\n        value: function draw_offer(data) {\n            var self = this;\n            // console.log(data);\n\n            $(\".draw\").parent().removeClass(\"hidden\").attr(\"disabled\", \"disabled\");\n            $(\".negotiation\").parent().removeClass(\"hidden\");\n            $(\"body\").off(\"click.draw_accept\").on(\"click.draw_accept\", \".accept\", function () {\n                var send_data = {\n                    data: self.game.fen(),\n                    id: g,\n                    is_over: 1,\n                    player: self.state.who_to_move === 'white' ? \"p1\" : \"p2\" //кто должен ходить\n                };\n                send_data.is_over = 1;\n                send_data.p1_won = 0.5;\n                send_data.p2_won = 0.5;\n                send_data.p1_id = p1;\n                send_data.p2_id = p2;\n                send_data.reason = \"draw\";\n                send_data.tourney_id = self.state.tourney_id;\n                window.socket.emit('eventServer', send_data);\n\n                var item = {\n                    msg: \"принял ничью\",\n                    user_id: u,\n                    name: user_name,\n                    chat_id: self.state.chat_id\n                };\n\n                window.socket.emit('message', item);\n            });\n\n            $(\"body\").off(\"click.decline_draw\").on(\"click.decline_draw\", \".decline\", function () {\n                window.socket.emit('decline_draw', JSON.stringify({\n                    game_id: g\n                }));\n\n                var item = {\n                    msg: \"отклонил ничью\",\n                    user_id: u,\n                    name: user_name,\n                    chat_id: self.state.chat_id\n                };\n\n                window.socket.emit('message', item);\n            });\n        }\n    }, {\n        key: \"socketIOConnect\",\n        value: function socketIOConnect() {\n            var self = this;var url = \"\";\n            if (typeof u != \"undefined\") {\n                url = 'h=' + u;\n            } else {\n                url = '';\n            }\n            //this.socket = io(window.location.origin, {query: url + '&g=' + g});\n\n            window.socket.on('eventClient', function (data) {\n                //data = JSON.parse(data);\n\n\n                // console.log(data);\n\n                if (data.event === \"move\") {\n                    self.cg.set({\n                        check: false,\n                        state: {\n                            check: false\n                        }\n                    });\n                    self.socketMove(data);\n                }\n                if (data.event === \"cancel_move\") {\n                    self.cancelMove(data);\n                } else if (data.event === \"rating_change\") {\n\n                    self.socketRatingChange(data);\n                } else if (data.event === \"game_over\") {\n\n                    self.cg.set({\n                        check: false,\n                        state: {\n                            check: false\n                        }\n                    });\n\n                    self.socketGamerOver(data);\n                } else if (data.event === \"game_aborted\") {\n\n                    self.socketGameAborted(data);\n                } else if (data.event === \"rematch_offer\") {\n                    self.socketRematchOffer(data);\n                } else if (data.event === \"playerOnline\") {\n                    self.socketPlayerOnline(data);\n                } else if (data.event === \"game_start\") {\n                    self.playzoneStartGame(data);\n                } else if (data.event === \"draw_offer\") {\n                    self.draw_offer(data);\n                } else if (data.event === \"decline_draw\") {\n                    self.decline_draw(data);\n                } else if (data.event === \"decline_rematch\") {\n                    self.decline_rematch(data);\n                } else if (data.event === \"rematch_cancel\") {\n                    self.rematch_cancel(data);\n                }\n            });\n\n            if (this.state.isPlayer === true) {\n                var who_online = \"white\";\n                if (this.state.orientation === \"black\") {\n                    who_online = \"black\";\n                }\n                window.socket.emit('playerOnOff', JSON.stringify({ online: who_online, p_id: u, game_id: g }));\n            }\n        }\n    }, {\n        key: \"setListeners\",\n        value: function setListeners() {\n\n            var self = this;\n\n            $(\"body\").on(\"click\", \"move\", function () {\n                var history = self.game.history();\n                var index = $(this).index(\"move\");\n                self.temp_game = new Chess();\n\n                if (index != history.length - 1) {\n                    for (var i = 0; i < history.length; i++) {\n                        var obj1 = history[i];\n                        if (i <= index) {\n                            self.temp_game.move(obj1);\n                        }\n                    }\n\n                    self.temp_move = index;\n\n                    self.cg.set({\n                        fen: self.temp_game.fen(),\n                        viewOnly: true\n                    });\n                } else {\n                    self.cg.set({\n                        fen: self.game.fen(),\n                        viewOnly: false\n                    });\n                }\n            });\n\n            $(\"body\").on(\"click\", \".resign\", function (event) {\n\n                self.resign(this);\n            });\n\n            $(\"body\").on(\"click\", \".draw\", function () {\n\n                self.draw(this);\n            });\n\n            $(\"body\").on(\"click\", \"#accept_rematch\", function () {\n                $(this).attr(\"disabled\", \"disabled\");\n                window.socket.emit('rematch_accepted', JSON.stringify({\n                    \"user_id\": u,\n                    \"current_color\": u == p1 ? \"white\" : \"black\",\n                    \"user_name\": u == p1 ? p1_name : p2_name,\n                    \"enemy_name\": u == p2 ? p1_name : p2_name,\n                    \"amount\": self.state.amount,\n                    \"time_inc\": parseInt(self.state.time_inc) / 1000,\n                    \"enemy_id\": u == p1 ? p2 : p1\n                }));\n            });\n            $(\"body\").on(\"click\", \"#decline_rematch\", function () {\n                window.socket.emit('decline_rematch', JSON.stringify({\n                    game_id: g\n                }));\n                var item = {\n                    msg: \"отклонил реванш\",\n                    user_id: u,\n                    name: user_name,\n                    chat_id: self.state.chat_id\n                };\n\n                window.socket.emit('message', item);\n            });\n\n            $(\"#download_pgn_form\").on(\"submit\", function () {\n                self.downloadPgn();\n                return false;\n            });\n\n            $(document).keydown(function (e) {\n                switch (e.which) {\n                    case 37:\n                        // left\n                        self.goBack();\n                        break;\n                    case 38:\n                        // up\n                        break;\n                    case 39:\n                        // right\n                        self.goForward();\n                        break;\n                    case 40:\n                        // down\n                        break;\n\n                    default:\n                        return; // exit this handler for other keys\n                }\n                e.preventDefault(); // prevent the default action (scroll / move caret)\n            });\n        }\n    }]);\n\n    return App;\n}();\n\nfunction getDests(game) {\n    var dests = {};\n    game.SQUARES.forEach(function (s) {\n        var ms = game.moves({ square: s, verbose: true });\n        if (ms.length) dests[s] = ms.map(function (m) {\n            return m.to;\n        });\n    });\n    return dests;\n}\n\n$(function () {\n    window.party = new App();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ })

/******/ });